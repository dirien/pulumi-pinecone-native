# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PineconeIndexArgs', 'PineconeIndex']

@pulumi.input_type
class PineconeIndexArgs:
    def __init__(__self__, *,
                 index_dimension: pulumi.Input[int],
                 index_metric: pulumi.Input[str],
                 index_name: pulumi.Input[str],
                 index_pod_type: pulumi.Input[str],
                 index_pods: pulumi.Input[int],
                 index_replicas: pulumi.Input[int]):
        """
        The set of arguments for constructing a PineconeIndex resource.
        :param pulumi.Input[int] index_dimension: The dimensions of the vectors in the index.
        :param pulumi.Input[str] index_name: The name of the Pinecone index.
        """
        pulumi.set(__self__, "index_dimension", index_dimension)
        pulumi.set(__self__, "index_metric", index_metric)
        pulumi.set(__self__, "index_name", index_name)
        pulumi.set(__self__, "index_pod_type", index_pod_type)
        pulumi.set(__self__, "index_pods", index_pods)
        pulumi.set(__self__, "index_replicas", index_replicas)

    @property
    @pulumi.getter(name="indexDimension")
    def index_dimension(self) -> pulumi.Input[int]:
        """
        The dimensions of the vectors in the index.
        """
        return pulumi.get(self, "index_dimension")

    @index_dimension.setter
    def index_dimension(self, value: pulumi.Input[int]):
        pulumi.set(self, "index_dimension", value)

    @property
    @pulumi.getter(name="indexMetric")
    def index_metric(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_metric")

    @index_metric.setter
    def index_metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_metric", value)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Input[str]:
        """
        The name of the Pinecone index.
        """
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_name", value)

    @property
    @pulumi.getter(name="indexPodType")
    def index_pod_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_pod_type")

    @index_pod_type.setter
    def index_pod_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_pod_type", value)

    @property
    @pulumi.getter(name="indexPods")
    def index_pods(self) -> pulumi.Input[int]:
        return pulumi.get(self, "index_pods")

    @index_pods.setter
    def index_pods(self, value: pulumi.Input[int]):
        pulumi.set(self, "index_pods", value)

    @property
    @pulumi.getter(name="indexReplicas")
    def index_replicas(self) -> pulumi.Input[int]:
        return pulumi.get(self, "index_replicas")

    @index_replicas.setter
    def index_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "index_replicas", value)


class PineconeIndex(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 index_dimension: Optional[pulumi.Input[int]] = None,
                 index_metric: Optional[pulumi.Input[str]] = None,
                 index_name: Optional[pulumi.Input[str]] = None,
                 index_pod_type: Optional[pulumi.Input[str]] = None,
                 index_pods: Optional[pulumi.Input[int]] = None,
                 index_replicas: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a PineconeIndex resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] index_dimension: The dimensions of the vectors in the index.
        :param pulumi.Input[str] index_name: The name of the Pinecone index.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PineconeIndexArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PineconeIndex resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PineconeIndexArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PineconeIndexArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 index_dimension: Optional[pulumi.Input[int]] = None,
                 index_metric: Optional[pulumi.Input[str]] = None,
                 index_name: Optional[pulumi.Input[str]] = None,
                 index_pod_type: Optional[pulumi.Input[str]] = None,
                 index_pods: Optional[pulumi.Input[int]] = None,
                 index_replicas: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PineconeIndexArgs.__new__(PineconeIndexArgs)

            if index_dimension is None and not opts.urn:
                raise TypeError("Missing required property 'index_dimension'")
            __props__.__dict__["index_dimension"] = index_dimension
            if index_metric is None and not opts.urn:
                raise TypeError("Missing required property 'index_metric'")
            __props__.__dict__["index_metric"] = index_metric
            if index_name is None and not opts.urn:
                raise TypeError("Missing required property 'index_name'")
            __props__.__dict__["index_name"] = index_name
            if index_pod_type is None and not opts.urn:
                raise TypeError("Missing required property 'index_pod_type'")
            __props__.__dict__["index_pod_type"] = index_pod_type
            if index_pods is None and not opts.urn:
                raise TypeError("Missing required property 'index_pods'")
            __props__.__dict__["index_pods"] = index_pods
            if index_replicas is None and not opts.urn:
                raise TypeError("Missing required property 'index_replicas'")
            __props__.__dict__["index_replicas"] = index_replicas
        super(PineconeIndex, __self__).__init__(
            'pinecone:provider:PineconeIndex',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PineconeIndex':
        """
        Get an existing PineconeIndex resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PineconeIndexArgs.__new__(PineconeIndexArgs)

        __props__.__dict__["index_name"] = None
        return PineconeIndex(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "index_name")

